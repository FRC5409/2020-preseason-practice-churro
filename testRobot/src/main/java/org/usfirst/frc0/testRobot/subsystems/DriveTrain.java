// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc0.testRobot.subsystems;

import org.usfirst.frc0.testRobot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AnalogInput ultrasonic;
    private Encoder sen_E4t_360_left_QuadratureEncoder;
    private Encoder sen_E4t_360_right_QuadratureEncoder;
    private WPI_VictorSPX mot_leftDrive_VictorSPX_C20;
    private WPI_VictorSPX mot_rightDrive_VictorSPX_C20;
    private DifferentialDrive differentialDrive;
    private AnalogInput analogInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ultrasonic = new AnalogInput(0);
        addChild("Ultrasonic",ultrasonic);
        
        sen_E4t_360_left_QuadratureEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("s_E4t_360_left_Quadrature Encoder",sen_E4t_360_left_QuadratureEncoder);
        sen_E4t_360_left_QuadratureEncoder.setDistancePerPulse(1.0);
        sen_E4t_360_left_QuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        sen_E4t_360_right_QuadratureEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        addChild("s_E4t_360_right_Quadrature Encoder",sen_E4t_360_right_QuadratureEncoder);
        sen_E4t_360_right_QuadratureEncoder.setDistancePerPulse(1.0);
        sen_E4t_360_right_QuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        mot_leftDrive_VictorSPX_C20 = new WPI_VictorSPX(20);
        mot_rightDrive_VictorSPX_C20 = new WPI_VictorSPX(21);
        
        differentialDrive = new DifferentialDrive(mot_leftDrive_VictorSPX_C20, mot_rightDrive_VictorSPX_C20);
        addChild("Differential Drive",differentialDrive);
        differentialDrive.setSafetyEnabled(true);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        analogInput = new AnalogInput(1);
        addChild("Analog Input",analogInput);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

        // this command loops when no other command is running
        setDefaultCommand(new TankDrive() );
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        
    }

    // set r motor speed
    public void setRightMotorSpeed(double speed) {
        // set the speed of right victorSPX to speed
        mot_rightDrive_VictorSPX_C20.set(ControlMode.PercentOutput, speed);
    }

    // set speed of left motor
    public void setLeftMotorSpeed(double speed) {
        // motors are the same type, but one is attatched the other way so it's direction
        // needs to be inverted in code so they move the same way in real
        mot_leftDrive_VictorSPX_C20.set(ControlMode.PercentOutput, -speed);
    }

    // sets speed of left motors
    public void driveStraight(double speed) {
        differentialDrive.tankDrive(-speed, speed);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

