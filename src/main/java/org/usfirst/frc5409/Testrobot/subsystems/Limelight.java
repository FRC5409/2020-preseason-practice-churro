package org.usfirst.frc5409.Testrobot.subsystems;

import org.usfirst.frc5409.Testrobot.*;
import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc5409.Testrobot.commands.*;
import org.usfirst.frc5409.Testrobot.limelight.lltype;

import edu.wpi.first.networktables.*;

public class Limelight extends Subsystem {
    private NetworkTable      m_limelight_data;
    private NetworkTableEntry m_data_entry_led_mode;
    private NetworkTableEntry m_data_entry_cam_mode;
    private NetworkTableEntry m_data_entry_pipeline;

    private Object            m_this_mutex;

    public Limelight() {
        // Might need to wait for table creation, maybe add a listener for the table
        m_limelight_data = NetworkTableInstance.getDefault().getTable("limelight");

        m_data_entry_led_mode = m_limelight_data.getEntry("ledMode");
        m_data_entry_cam_mode = m_limelight_data.getEntry("camMode");
        m_data_entry_pipeline = m_limelight_data.getEntry("pipeline");

        // Maybe create a watchdog system in case of limelight malfunction (i.e disconnection)
    }
    
    @Override
    public void initDefaultCommand() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }
    
    @Override
    public void periodic() {

    }

    public void setCameraMode(lltype.CameraMode camera_mode) {
        final double camera_mode_byte = camera_mode.get();

        synchronized(m_this_mutex) {
            m_data_entry_cam_mode.setDouble(camera_mode_byte);
        }
    }

    public void setLedMode(lltype.LedMode led_mode) {
        final double led_mode_byte = led_mode.get();

        synchronized(m_this_mutex) {
            m_data_entry_led_mode.setDouble(led_mode_byte);
        }
    }

    public void setPipelineIndex(lltype.PipelineIndex pipeline_index) {
        final double pipeline_index_byte = pipeline_index.get();

        synchronized(m_this_mutex) {
            m_data_entry_pipeline.setDouble(pipeline_index_byte);
        }
    }
}