package org.usfirst.frc5409.Testrobot.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc5409.Testrobot.limelight.lltype.CameraMode;
import org.usfirst.frc5409.Testrobot.limelight.lltype.LedMode;
import org.usfirst.frc5409.Testrobot.limelight.lltype.PipelineIndex;

import org.usfirst.frc5409.Testrobot.commands.*;


import edu.wpi.first.networktables.*;

public class Limelight extends Subsystem {
    private NetworkTable         m_limelight_data;
    private NetworkTableEntry    m_data_entry_led_mode;
    private NetworkTableEntry    m_data_entry_cam_mode;
    private NetworkTableEntry    m_data_entry_pipeline;

    private LedMode              m_local_led_mode;
    private CameraMode           m_local_cam_mode;
    private PipelineIndex        m_local_pipeline;

    private Object               m_this_mutex;

    public Limelight() {
        // Might need to wait for table creation, maybe add a listener for the table
        m_limelight_data      = NetworkTableInstance.getDefault().getTable("limelight");

        m_local_led_mode      = LedMode.LED_OFF;
        m_local_cam_mode      = CameraMode.MODE_DRIVER;
        m_local_pipeline      = PipelineIndex.PIPELINE_0;

        m_data_entry_cam_mode = m_limelight_data.getEntry("camMode");
        m_data_entry_led_mode = m_limelight_data.getEntry("ledMode");
        m_data_entry_pipeline = m_limelight_data.getEntry("pipeline");

        // Maybe create a watchdog system in case of limelight malfunction (i.e disconnection)
    }
    
    @Override
    public void initDefaultCommand() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Blink());
    }
    
    @Override
    public void periodic() {
    }

    public void setCameraMode(CameraMode camera_mode) {
        final double camera_mode_byte = camera_mode.get();

        synchronized(m_this_mutex) {
            m_data_entry_cam_mode.setDouble(camera_mode_byte);
            m_local_cam_mode = camera_mode;
        }
    }

    public CameraMode getCameraMode() {
        final double real_camera_mode = m_data_entry_cam_mode.getDouble(-1);

        if (real_camera_mode == -1) {
            //Do something here, this is probably an error
        }

        synchronized(m_this_mutex) {
            if (m_local_cam_mode.get() != real_camera_mode)
                m_data_entry_cam_mode.forceSetDouble(m_local_cam_mode.get());
        }
        return m_local_cam_mode;
    }

    public void setLedMode(LedMode led_mode) {
        final double led_mode_byte = led_mode.get();

        synchronized(m_this_mutex) {
            m_data_entry_led_mode.setDouble(led_mode_byte);
            m_local_led_mode = led_mode;
        }
    }

    public LedMode getLedMode() {
        final double real_led_mode = m_data_entry_led_mode.getDouble(-1);

        if (real_led_mode == -1) {
            //Do something here, this is probably an error
        }

        synchronized(m_this_mutex) {
            // if (m_local_led_mode.get() != real_led_mode) //Is this check redundant?
                m_data_entry_led_mode.forceSetDouble(m_local_led_mode.get());
        }
        return m_local_led_mode;
    }

    public void setPipelineIndex(PipelineIndex pipeline_index) {
        final double pipeline_index_byte = pipeline_index.get();

        synchronized(m_this_mutex) {
            m_data_entry_pipeline.setDouble(pipeline_index_byte);
            m_local_pipeline = pipeline_index;
        }
    }

    public PipelineIndex getPipelineIndex() {
        final double real_pipeline_index = m_data_entry_pipeline.getDouble(-1);

        if (real_pipeline_index == -1) {
            //Do something here, this is probably an error
        }

        synchronized(m_this_mutex) {
            if (m_local_pipeline.get() != real_pipeline_index)
                m_data_entry_cam_mode.forceSetDouble(m_local_pipeline.get());
        }
        return m_local_pipeline;
    }
}