package org.usfirst.frc5409.Testrobot.subsystems;

import org.usfirst.frc5409.Testrobot.commands.*;
import org.usfirst.frc5409.Testrobot.util.JoystickType;
import org.usfirst.frc5409.Testrobot.util.Range;
import org.usfirst.frc5409.Testrobot.Robot;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_VictorSPX m_leftDrive_Victor_SPX_C20;
    private WPI_VictorSPX m_rightDrive_Victor_SPX_C21;
    private DifferentialDrive differentialDrive;
    private Encoder m_E4t_360_left_Quad_Encoder;
    private Encoder m_E4t_360_right_Quad_Encoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final double c_Drivetrain_Wheel_Diamater_in = 6;
    public static final double c_Drivetrain_Gear_Ratio = 10.71;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    public static final double c_Distance_Per_Pulse = 
        (Math.PI * c_Drivetrain_Wheel_Diamater_in) / (c_Drivetrain_Gear_Ratio*4);

    public static final Range<Double> c_Drivetrain_velocity_range_in =
        new Range(-39.97*5, 39.75*5);

    private double v_drivetrain_velocity = 0;
    private double v_drivetrain_rotation = 0;
    private double v_velocity_lerp_T = 0.01;
    private double v_rotation_lerp_T = 0.01;

    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_leftDrive_Victor_SPX_C20 = new WPI_VictorSPX(20);
        
        
        
        m_rightDrive_Victor_SPX_C21 = new WPI_VictorSPX(21);
        
        
        differentialDrive = new DifferentialDrive(m_leftDrive_Victor_SPX_C20, m_rightDrive_Victor_SPX_C21);
        addChild("Differential Drive",differentialDrive);
        differentialDrive.setSafetyEnabled(true);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        
        m_E4t_360_left_Quad_Encoder = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("m_E4t_360_left_Quad_Encoder",m_E4t_360_left_Quad_Encoder);
        m_E4t_360_left_Quad_Encoder.setDistancePerPulse(1.0);
        m_E4t_360_left_Quad_Encoder.setPIDSourceType(PIDSourceType.kRate);
        
        m_E4t_360_right_Quad_Encoder = new Encoder(4, 5, false, EncodingType.k4X);
        addChild("m_E4t_360_right_Quad_Encoder",m_E4t_360_right_Quad_Encoder);
        m_E4t_360_right_Quad_Encoder.setDistancePerPulse(1.0);
        m_E4t_360_right_Quad_Encoder.setPIDSourceType(PIDSourceType.kRate);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        m_E4t_360_left_Quad_Encoder.setDistancePerPulse(c_Distance_Per_Pulse);
        m_E4t_360_right_Quad_Encoder.setDistancePerPulse(c_Distance_Per_Pulse);
              
        SmartDashboard.putNumber("TLerp Speed", v_velocity_lerp_T);
        SmartDashboard.putNumber("TLerp Rotation", v_rotation_lerp_T);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new Drive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        v_velocity_lerp_T =
            SmartDashboard.getNumber("TLerp Speed", v_velocity_lerp_T);
        v_rotation_lerp_T = 
            SmartDashboard.getNumber("TLerp Rotation", v_rotation_lerp_T);

        SmartDashboard.putNumber("Speed", v_drivetrain_velocity);
        differentialDrive.arcadeDrive(v_drivetrain_rotation, v_drivetrain_velocity);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public void updateDrive(double velocity, double r_velocity) {
        v_drivetrain_velocity = 
            lerp(velocity, v_drivetrain_velocity, v_velocity_lerp_T);
        v_drivetrain_rotation =
            lerp(r_velocity, v_drivetrain_rotation, v_rotation_lerp_T);
    }

    private double lerp(double a, double b, double t) {
        return a*t + b*(1-t);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

