// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Churro.subsystems;


import org.usfirst.frc0.Churro.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Subsystem1 extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Encoder s_E4t_360_left_QuadratureEncorder;
    private Encoder s_E4t_360_right_QuadratureEncorder;
    private AnalogInput analogInput1;
    private WPI_VictorSPX m_leftDrive_VictorSPX_C20;
    private WPI_VictorSPX m_rightDrive_VictorSPX_C20;
    private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Subsystem1() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        s_E4t_360_left_QuadratureEncorder = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("s_E4t_360_left_Quadrature Encorder",s_E4t_360_left_QuadratureEncorder);
        s_E4t_360_left_QuadratureEncorder.setDistancePerPulse(1.0);
        s_E4t_360_left_QuadratureEncorder.setPIDSourceType(PIDSourceType.kRate);
        
        s_E4t_360_right_QuadratureEncorder = new Encoder(4, 5, false, EncodingType.k4X);
        addChild("s_E4t_360_right_Quadrature Encorder",s_E4t_360_right_QuadratureEncorder);
        s_E4t_360_right_QuadratureEncorder.setDistancePerPulse(1.0);
        s_E4t_360_right_QuadratureEncorder.setPIDSourceType(PIDSourceType.kRate);
        
        analogInput1 = new AnalogInput(0);
        addChild("Analog Input 1",analogInput1);
        
        
        m_leftDrive_VictorSPX_C20 = new WPI_VictorSPX(20);
        
        
        
        m_rightDrive_VictorSPX_C20 = new WPI_VictorSPX(21);
        
        
        
        differentialDrive1 = new DifferentialDrive(m_leftDrive_VictorSPX_C20, m_rightDrive_VictorSPX_C20);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

